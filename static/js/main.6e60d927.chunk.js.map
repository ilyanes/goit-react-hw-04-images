{"version":3,"sources":["Components/Searchbar/SearchBar.jsx","data/utils.js","Components/ImageGalleryItem/ImageGalleryItem.jsx","Components/ImageGallery/ImageGallery.jsx","data/service.js","Components/Modal/Modal.jsx","App.js","index.js"],"names":["SearchBar","onQuery","onOption","useState","searchQuery","setSearchQuery","option","setOption","className","onSubmit","e","preventDefault","trim","toast","warn","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","type","name","autoComplete","autoFocus","placeholder","onChange","target","value","defaultValue","ImageGalleryItem","images","onKeyEnter","map","image","src","webformatURL","largeImageURL","alt","id","tabIndex","onKeyDown","ImageGallery","click","onClick","axios","defaults","baseURL","getImage","query","page","per_page","a","get","responce","data","propTypes","PropTypes","string","number","modalRoot","document","querySelector","Modal","modalImage","toggleModal","useEffect","escapeEvent","code","window","addEventListener","removeEventListener","createPortal","currentTarget","App","setQuery","setImages","setPage","setPer_page","isLoading","setIsLoading","error","setError","modalIsOpen","setModalIsOpen","largeImg","setlargeImg","totalHits","setTotalHits","refContainer","useRef","prev","current","then","r","state","hits","catch","finally","loadMoreIsNeeded","length","nodeName","dataset","height","width","color","ariaLabel","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.6e60d927.chunk.js","sourcesContent":["import { useState } from 'react';\nimport { ImSearch } from 'react-icons/im';\nimport PropTypes from 'prop-types';\nimport { ToastContainer } from 'react-toastify';\nimport { warnNotify } from '../../data/utils';\n\nexport const SearchBar = ({ onQuery, onOption }) => {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [option, setOption] = useState(10);\n\n  const onChangeOption = e => {\n    setOption(e.target.value);\n  };\n  const onChangeInput = e => {\n    setSearchQuery(e.target.value);\n  };\n\n  const onSubmit = e => {\n    e.preventDefault();\n    if (searchQuery.trim() === '') {\n      return warnNotify();\n    }\n    onQuery(searchQuery);\n    onOption(option);\n  };\n\n  return (\n    <header className=\"Searchbar\">\n      <ToastContainer />\n      <form className=\"SearchForm\" onSubmit={onSubmit}>\n        <button type=\"submit\" className=\"SearchForm-button\">\n          <span className=\"SearchForm-button-label\">Search</span>\n          <ImSearch />\n        </button>\n        <input\n          name=\"input\"\n          className=\"SearchForm-input\"\n          type=\"text\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search images and photos\"\n          onChange={onChangeInput}\n          value={searchQuery}\n        />\n      </form>\n      <label>\n        images per page\n        <select name=\"option\" value={option} onChange={onChangeOption}>\n          images per page\n          <option defaultValue value=\"10\">\n            10\n          </option>\n          <option value=\"20\">20</option>\n          <option value=\"30\">30</option>\n          <option value=\"40\">40</option>\n          <option value=\"50\">50</option>\n        </select>\n      </label>\n    </header>\n  );\n};\n\nSearchBar.propTypes = {\n  onQuery: PropTypes.func,\n  onOption: PropTypes.func,\n};\n","import { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nexport const errorNotify = () =>\r\n  toast.error('No images found', {\r\n    position: 'top-center',\r\n    autoClose: 1000,\r\n    hideProgressBar: false,\r\n    closeOnClick: true,\r\n    pauseOnHover: false,\r\n    draggable: true,\r\n  });\r\n\r\nexport const warnNotify = () =>\r\n  toast.warn(' No data entered', {\r\n    position: 'top-center',\r\n    autoClose: 1000,\r\n    hideProgressBar: false,\r\n    closeOnClick: true,\r\n    pauseOnHover: true,\r\n    draggable: true,\r\n  });\r\n","import PropTypes from 'prop-types';\n\nexport const ImageGalleryItem = ({ images, onKeyEnter }) => {\n  return (\n    <>\n      {images.map(image => (\n        <li className=\"ImageGalleryItem\" key={image.id}>\n          <img\n            src={image.webformatURL}\n            data-src={image.largeImageURL}\n            alt={image.id}\n            tabIndex={0}\n            onKeyDown={onKeyEnter}\n            className=\"ImageGalleryItem-image\"\n          />\n        </li>\n      ))}\n    </>\n  );\n};\n\nImageGalleryItem.propTypes = {\n  images: PropTypes.array,\n  onKeyEnter: PropTypes.func,\n};\n","import { ImageGalleryItem } from '../ImageGalleryItem/ImageGalleryItem';\nimport PropTypes from 'prop-types';\n\nexport const ImageGallery = ({ images, click, onKeyEnter }) => {\n  return (\n    <ul className=\"ImageGallery\" onClick={click}>\n      <ImageGalleryItem images={images} onKeyEnter={onKeyEnter} />\n    </ul>\n  );\n};\n\nImageGallery.propTypes = {\n  images: PropTypes.array,\n  click: PropTypes.func,\n  onKeyEnter: PropTypes.func,\n};\n","import axios from 'axios';\r\nimport PropTypes from 'prop-types';\r\nconst KEY = '23049135-63d939595882c9f020474dd76';\r\naxios.defaults.baseURL = `https://pixabay.com/api/`;\r\n\r\nexport const getImage = async (query, page, per_page) => {\r\n  const responce = await axios.get(\r\n    `?q=${query}&key=${KEY}&page=${page}&&per_page=${per_page}&image_type=photo&orientation=horizontal`,\r\n  );\r\n  return responce.data;\r\n};\r\n\r\ngetImage.propTypes = {\r\n  query: PropTypes.string,\r\n  page: PropTypes.number,\r\n  per_page: PropTypes.number,\r\n};\r\n","import { createPortal } from 'react-dom';\nimport { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nconst modalRoot = document.querySelector('#modal-root');\n\nexport const Modal = ({ modalImage, alt, toggleModal }) => {\n  const onBackdropClick = e => {\n    if (e.currentTarget === e.target) {\n      toggleModal();\n    }\n  };\n  useEffect(() => {\n    const escapeEvent = e => {\n      if (e.code === 'Escape') {\n        toggleModal();\n      }\n    };\n    window.addEventListener('keydown', escapeEvent);\n    return () => {\n      window.removeEventListener('keydown', escapeEvent);\n    };\n  }, [toggleModal]);\n\n  return createPortal(\n    <div className=\"Overlay\" onClick={onBackdropClick}>\n      <div className=\"Modal\">\n        <img src={modalImage} alt={alt} />\n      </div>\n    </div>,\n    modalRoot,\n  );\n};\nModal.propTypes = {\n  modalImage: PropTypes.string,\n  alt: PropTypes.string,\n  toggleModal: PropTypes.func,\n};\n","import { useState, useEffect, useRef } from 'react';\nimport './App.css';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { SearchBar } from './Components/Searchbar/SearchBar.jsx';\nimport { ImageGallery } from './Components/ImageGallery/ImageGallery.jsx';\nimport { getImage } from './data/service';\nimport { Modal } from './Components/Modal/Modal';\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\nimport Loader from 'react-loader-spinner';\nimport { errorNotify } from './data/utils';\nimport PropTypes from 'prop-types';\n\nexport const App = () => {\n  const [query, setQuery] = useState('');\n  const [images, setImages] = useState([]);\n  const [page, setPage] = useState(1);\n  const [per_page, setPer_page] = useState(10);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const [modalIsOpen, setModalIsOpen] = useState(false);\n  const [largeImg, setlargeImg] = useState('');\n  const [totalHits, setTotalHits] = useState(0);\n  const refContainer = useRef(1);\n\n  const onSetQuery = searchQuery => {\n    if (searchQuery === query) {\n      return;\n    }\n    setQuery(searchQuery);\n    setPage(1);\n  };\n\n  const toggleModal = () => {\n    setModalIsOpen(prev => !prev);\n  };\n\n  const onImageClick = e => {\n    if (e.target.nodeName === 'IMG') {\n      setlargeImg(e.target.dataset.src);\n      toggleModal();\n    }\n  };\n  const onKeyEnter = e => {\n    if (e.target.nodeName === 'IMG' && e.code === 'Enter') {\n      setlargeImg(e.target.dataset.src);\n      toggleModal();\n    }\n  };\n\n  const loadMore = () => {\n    if (query === null) {\n      return;\n    }\n    setPage(state => state + 1);\n  };\n\n  useEffect(() => {\n    if (refContainer.current === 1) {\n      refContainer.current += 1;\n      return;\n    }\n    setIsLoading(true);\n    setError(false);\n    getImage(query, page, per_page)\n      .then(r => {\n        setImages(state => {\n          if (page === 1) {\n            return r.hits;\n          }\n          return [...state, ...r.hits];\n        });\n        r.totalHits === 0 && errorNotify();\n        setTotalHits(r.totalHits);\n      })\n      .catch(e => {\n        setImages([]);\n        setError(e);\n        setIsLoading(false);\n      })\n      .finally(() => setIsLoading(false));\n  }, [page, per_page, query]);\n\n  const loadMoreIsNeeded = totalHits > page * per_page ? true : false;\n\n  return (\n    <div className=\"section\">\n      <SearchBar onQuery={onSetQuery} onOption={setPer_page} />\n      {images.length !== 0 && (\n        <div>\n          <p>{`We found ${totalHits} images`}</p>\n        </div>\n      )}\n\n      <div>\n        <ToastContainer />\n        {error && <div>...Oops, something goes wrong!</div>}\n        <ImageGallery\n          click={onImageClick}\n          images={images}\n          onKeyEnter={onKeyEnter}\n        />\n        {isLoading && (\n          <>\n            <Loader\n              type=\"BallTriangle\"\n              className=\"spinner\"\n              height=\"100\"\n              width=\"100\"\n              color=\"#3f51b5\"\n              ariaLabel=\"loading\"\n            />\n            <div>...loading</div>\n          </>\n        )}\n        {totalHits !== 0 && loadMoreIsNeeded && (\n          <button className=\"Button\" onClick={loadMore}>\n            load More\n          </button>\n        )}\n        {images.length !== 0 && !loadMoreIsNeeded && (\n          <div> You have riched the end of image list </div>\n        )}\n        {modalIsOpen && (\n          <Modal\n            toggleModal={toggleModal}\n            modalImage={largeImg}\n            alt={query}\n          ></Modal>\n        )}\n      </div>\n    </div>\n  );\n};\n\nApp.propTypes = {\n  query: PropTypes.string,\n  images: PropTypes.array,\n  page: PropTypes.number,\n  isLoading: PropTypes.bool,\n  error: PropTypes.bool,\n  modalIsOpen: PropTypes.bool,\n  largeImg: PropTypes.string,\n  totalHits: PropTypes.number,\n  searchQuery: PropTypes.string,\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}